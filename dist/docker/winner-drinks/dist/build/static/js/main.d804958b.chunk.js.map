{"version":3,"sources":["App/Login.tsx","Components/Party/Party.tsx","Components/WheelComponent/WheelComponent.tsx","Components/BackToBack/BackToBack.tsx","Components/Trivia/utils/api-functions.ts","Components/Trivia/QuestionCard.tsx","Components/Trivia/Trivia.tsx","Components/Trivia/utils/functions.ts","model/Player.ts","App/WinnerAlert.tsx","App/Scoreboard.tsx","App/SkipGame.tsx","App/Game.tsx","App/ErrorMsg.tsx","Components/Menu/PlayerSettingBox.tsx","App/ResetButton.tsx","Components/Menu/Navbar.tsx","Components/Menu/Icon.tsx","util/GameModuleName.ts","util/API.ts","util/LocalDB.ts","util/UtilServiceFactory.ts","model/GameModuleService.ts","model/GameService.ts","model/ModuleFactory.ts","App/App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["Login","addUser","useState","input","setInput","className","type","value","name","id","onChange","e","target","length","onClick","Party","gameService","gameEvent","getPlayers","players","setPlayers","useEffect","data-testid","question","replace","addScore","makeWinnerAlert","chooseRandomNewGame","toString","colors","style","animationName","animationTimingFunction","animationDuration","animationDelay","animationIterationCount","animationDirection","animationFillMode","marginBottom","WheelComponent","list","rotateDeg","isReset","setIsReset","result","setResult","errorMessage","setErrorMessage","randomIntFromInterval","min","max","Math","floor","random","getWinner","index","winner","console","log","reset","document","styleSheets","deleteRule","error","margin","winnerIndex","degrees","degreeWinner","getRandomRotationDegrees","styleSheet","keyframes","insertRule","cssRules","setTimeout","TIME","map","val","degree","transform","borderRight","BackToBack","formatAPIResponseString","spanTag","createElement","innerHTML","QuestionCard","answer","handleAnswer","Trivia","modefiedGameEvent","setModefiedGameEvent","all_answers","incorrect_answers","push","correct_answer","a","i","j","shuffleArray","innerText","uuidv1","Player","isActive","score","Error","trim","this","newScore","points","debug","WinnerAlert","winners","message","item","display","Scoreboard","SkipGame","Game","gameModuleService","activeGames","gameModules","currentGameIndex","setCurrentGameIndex","undefined","triviaEvents","setTriviaEvents","backToBackEvents","setBackToBackEvents","partyEvents","setPartyEvents","setWinners","flash","setFlash","currentQuestion","setCurrentQuestion","getTriviaEvents","getBackToBackEvents","getPartyEvents","currentGame","p","Array","isArray","newGameIndex","getNewGameIndex","setEventCurrentQuestion","getRandomGameEvent","gameServiceProps","removeGameEvent","gameEventId","gameEvents","questions","filter","_id","getNumActivePlayers","ErrorMsg","props","PlayerSettingBox","player","updatePlayerActive","deletePlayer","color","icon","faPause","faPlayCircle","cursor","faTrashAlt","ComponentGetToKnow","window","location","reload","Navbar","navbarOpen","gameModuleSettings","onGameModuleSettingUpdate","deleteUser","inputName","setInputName","playerName","padding","height","module","href","moduleName","preventDefault","activeModules","active","copiedArray","updateActiveGameModule","checked","marginRight","placeholder","overflowY","ResetButton","Icon","GameModuleName","setNavbarOpen","faCog","size","API","baseUrl","process","axios","get","response","data","connectionAPI","apiPath","enumKeys","obj","Object","keys","k","Number","isNaN","LocalDB","db","dbName","dbVersion","openDB","upgrade","oldVersion","newVersion","transaction","objectStoreNames","contains","createObjectStore","keyPath","blocked","blocking","terminated","gameEventsPromises","loadAndFetchGameEvents","Promise","all","catch","gameModuleName","fetch","json","forEach","loadTable","store","objectStore","put","getAll","deleteDB","getUtilService","api","localDB","indexedDB","checkStatus","openLocalDB","GameModuleService","utilsService","getGameEvents","TRIVIA","PARTY","BACK_TO_BACK","then","GameService","newIndex","nrOfPlayers","activePlayers","shuffle","slice","gameEventAPI","numOfActivePlayers","array","t","m","gameModuleSerivce","loadGameEvents","App","setGameModuleSerivce","play","setPlay","nameerror","setError","setGameModuleSettings","getGameModuleService","gms","updatedPlayers","findIndex","splice","gameModuleSettingUpdate","newPlayerName","newPlayer","alert","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","URL","origin","addEventListener","headers","contentType","status","indexOf","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.d804958b.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\n\ntype LoginProps = {\n  addUser: (newPlayerName: string) => void\n}\n\nconst Login: React.FC<LoginProps> = ({ addUser }) => {\n  const [input, setInput] = useState('');\n  return (\n    <div className=\"Login box\">\n      <h1 className=\"title\">Add all players</h1>\n      <input className=\"input\" type=\"text\" value={input} name=\"newname\" id=\"newname\" onChange={e => {\n        if ((e.target as any).value.length > 10) return;\n        setInput((e.target as any).value);\n      }} />\n      <input className=\"button\" type=\"button\" onClick={() => {\n        addUser(input);\n        setInput('');\n\n      }} value=\"Add\" id=\"newnamebtn\" />\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState, useEffect } from 'react';\nimport { TextGameModuleProps } from '../GameModuleProps';\n\n\nconst Party: React.FC<TextGameModuleProps> = ({ gameService, gameEvent }) => {\n    const [players, setPlayers] = useState(gameService.getPlayers(2, gameService.players));\n    \n    function addPlayerToGameEvent(): string {\n        //const gameEvent: string = gameEvent.question\n        return gameEvent.question.replace(/{p0}/g, `${players[0]}`).replace(/{p1}/g, `${players[1]}`)\n    }\n\n    useEffect(() => { \n        return () => { // Return a function for code cleanup. This will set new players \n            setPlayers(gameService.getPlayers(2, gameService.players));\n        }\n    }, [gameService])\n\n    return (\n        <div className=\"box\">\n            <div data-testid=\"game-event\" className=\"content\">{addPlayerToGameEvent()}</div>\n            <h3>Who won?</h3>\n\n            <button className=\"button\" onClick={() => {\n                gameService.addScore(players[0], 1)\n                gameService.makeWinnerAlert(players[0])\n                gameService.chooseRandomNewGame()\n            }}>{players[0].toString()}</button>\n\n            <button className=\"button\" onClick={() => {\n                gameService.addScore(players[1], 1)\n                gameService.makeWinnerAlert(players[1])\n                gameService.chooseRandomNewGame()\n            }}>{players[1].toString()}</button>\n\n        </div>\n    )\n};\n\nexport default Party;","import React, { useState, useEffect } from 'react';\nimport './WheelComponent.css'\nimport { AnimationGameModuleProps } from '../GameModuleProps'\n\nconst DEG = 360\nconst colors = ['#9ede73', '#f7ea00', '#e48900', '#be0000']\nconst TIME = 3\n\nlet style = {\n  animationName: 'spin',\n  animationTimingFunction: 'ease-in-out',\n  animationDuration: `${TIME}s`,\n  animationDelay: '0.0s',\n  animationIterationCount: 1,\n  animationDirection: 'normal',\n  animationFillMode: 'forwards',\n  marginBottom: '2rem'\n};\n\n/**\n * \n * @param {Array} users Array of participant names. \n * @returns {jsx} Component\n */\nconst WheelComponent: React.FC<AnimationGameModuleProps> = ({ gameService }) =>  {\n  // Error checking number of users. If < 4 => duplicate one of the users / If > 4 => skip one of the users\n  // const gp: GameProps = props.gp;\n  const list = gameService.getPlayers(4, gameService.players)\n  const rotateDeg = DEG / list.length\n  const [isReset, setIsReset] = useState(true)\n  const [result, setResult] = useState('')\n  const [errorMessage, setErrorMessage] = useState('')\n  \n  /**\n   * Function that generate random integer in span (min and max included).\n   * @param {Number} min Min number\n   * @param {Number} max Max number\n   * @returns {Number} Random number generated\n   */\n  const randomIntFromInterval = (min: number, max: number): number => Math.floor(Math.random() * (max - min + 1) + min);\n\n  /**\n   * Function that generates random degrees that the wheel will spin.\n   * @param {Number} index Index of the winning element\n   * @returns {Number} Degrees generated\n   */\n  const getRandomRotationDegrees = (index: number): number => {\n    let degreeWinner: number = 0;\n    switch(index) {\n      case(0):\n        degreeWinner = randomIntFromInterval(226, 315)\n        break\n      case(1):\n        degreeWinner = randomIntFromInterval(136, 225)\n        break\n      case(2):\n        degreeWinner = randomIntFromInterval(46, 135)\n        break\n      case(3):\n        degreeWinner = randomIntFromInterval(0, 45)\n        break\n      default:\n      break\n    }\n\n    const rotateDegrees = 360 * 4 + degreeWinner\n    return rotateDegrees\n  }\n  \n  /**\n   * Function that is called when user click spin-button.\n   * Calls the other function and set the winner.\n   */\n  const startSpin = () => {\n    if(isReset) {\n      setErrorMessage('')\n\n      const winnerIndex = randomIntFromInterval(1, list.length) - 1\n      const degrees = getRandomRotationDegrees(winnerIndex)\n    \n      let styleSheet = document.styleSheets[0];\n\n      let keyframes = `\n      @keyframes spin {\n        from {transform:rotate(0deg);}\n        to {transform:rotate(${degrees}deg);}\n      }`\n    \n      styleSheet.insertRule(keyframes, styleSheet.cssRules.length);\n    \n      setTimeout(() => getWinner(winnerIndex), (TIME) * 1000 + 500);\n    } else {\n      setErrorMessage('Please reset the wheel...')\n      console.log('Please reset the wheel...')\n    }\n\n    setIsReset(false)\n  }\n\n  /**\n   * Function that gets and sets the winner.\n   * @param {Number} index \n   */\n  const getWinner = (index: number) => {\n    const winner = list[index]\n    console.log(`Winning value is: ${winner.toString()}`)\n    setResult(`${winner.toString()} won!`)\n    reset();\n\n    gameService.addScore(winner, 1)\n    gameService.makeWinnerAlert(winner)\n    gameService.chooseRandomNewGame()\n\n  }\n\n  /**\n   * Function that resets the wheel and values.\n   */\n  const reset = () => {\n    try {\n      let styleSheet = document.styleSheets[0];\n      styleSheet.deleteRule(2)\n      setIsReset(true)\n      setErrorMessage('')\n      setResult('')\n    } catch (error) {\n      console.log('Stylesheet has already been reset...')\n      setErrorMessage('Stylesheet has already been reset...')\n    }\n  }\n  /**\n   * Return a function for code cleanup.\n   */\n//   useEffect(() => { \n//     return () => {\n//       reset();\n//     }\n// }, [])\n\n  return (\n    \n    <div className=\"WheelComponent\">\n      <span style={{margin: '0px'}}>|</span>\n      <div onClick={startSpin} className=\"wheel\" style={style}>\n      {list.map((val, index) => {\n        const degree = (index * rotateDeg) //- 45\n        \n        return (\n          <div key={index} style={{transform: `rotate(${degree}deg)`, borderRight: `200px solid ${colors[index]}`}} className=\"arrow\">\n            <span>{val.toString()}</span>\n          </div>\n        )\n      })}\n      </div>\n      <div className=\"d-flex\">\n        {/* <button onClick={startSpin}>Spin!</button> */}\n      </div>\n      <div>\n        <p>{errorMessage}</p>\n        <p>{result}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default WheelComponent;","import { useState, useEffect } from 'react';\nimport { TextGameModuleProps } from '../GameModuleProps';\nimport '../../App/App.css';\n\nconst NUM_OF_PLAYERS = 2; // How many players do you need?\n\nconst BackToBack: React.FC<TextGameModuleProps> = ({ gameService, gameEvent }) => {\n    // const gp: GameProps = props.gp; // Contains the methods done and getPlayers. \n    const [players, setPlayers] = useState(gameService.getPlayers(NUM_OF_PLAYERS, gameService.players)); // players is an array \n\n    useEffect(() => { \n        return () => { // Return a function for code cleanup. This will set new players \n          setPlayers(gameService.getPlayers(NUM_OF_PLAYERS, gameService.players));\n        }\n    }, [gameService])\n\n    // Either both win, or both lose.\n\n    return (\n        <div className=\"box container\">\n            <div>{players[0].toString()} and {players[1].toString()}</div>\n            <div data-testid=\"game-event\" className=\"content\">{gameEvent.question}</div>\n            <h3 className=\"title is-6\">Were both correct?</h3>\n\n            <button className=\"button\" onClick={() => {\n                gameService.addScore(players[0], 1)\n                gameService.addScore(players[1], 1)\n                gameService.makeWinnerAlert(players)\n                gameService.chooseRandomNewGame()\n            }}>They were correct!</button>\n            <button className=\"button\" onClick={() => {\n                gameService.makeWinnerAlert(null)\n                gameService.chooseRandomNewGame()\n            }}>They were wrong!</button>\n        </div>\n    )\n};\n\nexport default BackToBack;","export const formatAPIResponseString = (input: string) => {\n  let spanTag = document.createElement('span')\n  spanTag.innerHTML = input\n  return spanTag.innerHTML\n}\n","import React, { useEffect } from 'react'\nimport './QuestionCard.css';\n\ntype Props = {\n  answer: string;\n  handleAnswer: (e: any) => void;\n}\n\nconst QuestionCard: React.FC<Props> = ({ answer, handleAnswer }) => {\n\n  useEffect(() => {\n  }, [])\n\n  return (\n\n      <div className={'questionDiv card'}\n        onClick={handleAnswer}>\n        {answer}\n      </div>\n\n  );\n}\n\nexport default QuestionCard;","import React, { useEffect, useState } from 'react'\nimport { v1 as uuidv1 } from 'uuid'\nimport { formatAPIResponseString } from './utils/api-functions'\nimport { shuffleArray } from './utils/functions'\nimport './Trivia.css';\nimport QuestionCard from './QuestionCard';\nimport { TextGameModuleProps } from '../GameModuleProps';\n\nconst NUM_OF_PLAYERS = 1;\n\nconst Trivia: React.FC<TextGameModuleProps> = ({ gameService, gameEvent}) => {\n  const [players, setPlayers] = useState(gameService.getPlayers(NUM_OF_PLAYERS, gameService.players));\n  const [modefiedGameEvent, setModefiedGameEvent] = useState<ITrivia>();\n\n  useEffect(() => {\n    let all_answers\n    if ('incorrect_answers' in gameEvent) {\n      all_answers = gameEvent.incorrect_answers\n      all_answers.push(gameEvent.correct_answer)\n      all_answers = shuffleArray(all_answers)\n      gameEvent.all_answers = all_answers\n      setModefiedGameEvent(gameEvent);\n      \n    }\n  }, [gameEvent])\n\n  useEffect(() => {\n    return () => { // Return a function for code cleanup. This will set new players \n      setPlayers(gameService.getPlayers(NUM_OF_PLAYERS, gameService.players))\n    }\n  }, [gameService])\n\n\n  const handleAnswer = (e: any) => {\n    if (!modefiedGameEvent) {\n      return\n    }\n\n    if (e.target.innerText === modefiedGameEvent.correct_answer) {\n      gameService.addScore(players[0], 1)\n    }\n\n    gameService.chooseRandomNewGame()\n    gameService.makeWinnerAlert(players[0])\n  }\n\n  if (!modefiedGameEvent) {\n    return (\n      <button \n        className=\"button\" \n        onClick={() => {\n        gameService.makeWinnerAlert(null)\n        gameService.chooseRandomNewGame()\n        }}>\n        Triva question could not be loaded!\n    </button>\n    )\n  }\n\n  return (\n    <div className=\"box\">\n      <div id={'gameInfo'}>\n        <h4>Turn to answer a question: </h4>\n        <ul>\n          <li className=\"card\" >{players[0].name}</li>\n        </ul>\n      </div>\n\n      <br />\n      <h2>{formatAPIResponseString(gameEvent.question)}</h2>\n\n      <div className={'answersDiv'}>\n        <br />\n        {modefiedGameEvent.all_answers.map((answer: string) => {\n          return <QuestionCard answer={formatAPIResponseString(answer)} handleAnswer={handleAnswer} key={uuidv1()} />\n        })}\n      </div>\n\n    </div>\n  )\n}\n\nexport default Trivia;","export const shuffleArray = (a: string[]):string[] => {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}","/**\n * A player class for keeping track of the player names, \n * their score and whether they are currently active in the game or not. \n * @author Delfi Sehidic\n */\n\nclass Player {\n    name: string; // The name of the player as registered in the input\n    isActive: boolean; // Is the player currently playing or paused for e.g. a bathroom visit?\n    score: number;\n\n    /**\n     * Constructs a new player object. \n     * @param name Must be at least 3 characters long and not exceed 10.\n     */\n    constructor(name: string) {\n        if (name.length < 3 || name.length > 10) {\n            throw Error(\"Name must be at least 3 characters and not exceed 10.\");\n        };\n        if (name && !name.trim()) {\n            throw Error(\"Name cannot be empty.\");\n        };\n        this.name = name;\n        this.isActive = true;\n        this.score = 0;\n    }\n    /**\n     * Overwrites the old score of the player and sets it to newScore. \n     * @param newScore \n     */\n    setScore(newScore: number) {\n        this.score = newScore;\n    };\n    /**\n     * Updates the score. For example, if the score is 10 and points is 1, the score will now be 11. \n     * \n     * @param points Added to the existing score. Can be negative. \n     */\n    addScore(points: number) {\n        this.score += points;\n    };\n    /**\n     * Returns a string representation of the player. \n     * @param debug If set to true, it also returns the score and activity of the player. \n     * @returns Player name or full player stats. \n     */\n    toString(debug?:boolean): string {\n        if (debug) {\n            return `Name: ${this.name} Score: ${this.score} isActive: ${this.isActive}`;\n        }\n        return this.name;\n    }\n}\n\nexport default Player;","/**\n * A component that renders the winners of a game, if any. \n * \n * @author Delfi Sehidic\n */\n\nimport React from 'react';\nimport Player from '../model/Player'\n\ntype WinnerAlertProps = {\n    winners: Player[] | null,\n    message: string | undefined\n}\n\nconst WinnerAlert: React.FC<WinnerAlertProps> = ({ winners, message }) => {\n\n    if (winners == null) { // Null means that no one won anything.\n        return (\n            <div className=\"box\">{message || \"No points awarded\"}</div>\n        )\n    } else if (winners.length === 1) { // If there is only one winner....\n        return (\n            <div className=\"box\">\n                {message || \"Have a sip, \"} {winners[0].toString()}\n            </div>\n        );\n    } else if (winners.length > 1) { // If there are several winners, display them all. \n        \n        return (\n            <div className=\"box\">\n                <div>{message || \"A sip each to:  \"}</div>\n                 {winners.map((item: Player, index: number) =>\n            (<span key={index} className=\"tag\">{item.toString()}</span>)\n          )}\n            </div>\n        );\n    }\n  else {\n      // Initial state. No winner or loser, just an empty span. \n    return (\n        <span style={{display: \"none\"}}></span>\n      );\n  }\n  \n}\n\nexport default WinnerAlert;\n","/**\n * A component that renders the current scoreboard.\n * \n * @author Susanna Persson\n */\n\nimport Player from '../model/Player'\n\ntype ScoreBoardProps = {\n    players: Player[]\n}  \n  \nconst Scoreboard: React.FC<ScoreBoardProps> = ({ players }) => {\n\n    if (players == null) {\n        return (\n            <div className=\"box\">{\"No scores yet!\"}</div>\n        )\n    } else if (players) {\n        return (\n            <div className=\"box\">\n                <div className=\"\">Current score:</div>\n                    <table className=\"table is-fullwidth is-striped scoreboard\">\n                        <tbody>\n                            {players.map((item: Player, index: number) => (\n                                <tr key={index}>\n                                    <th>{item.toString()}:</th><td>{item.score}</td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table> \n            </div>\n        );\n    } else {\n        return (\n            <span style={{display: \"none\"}}></span>\n        );\n    }\n}\n\nexport default Scoreboard;\n","/**\n * Skip the current game and go to the next. \n * \n * @author Delfi Sehidic\n */\n\nimport React from 'react';\nimport Player from '../model/Player'\n\n\ntype SkipGameProps = {\n    makeWinnerAlert: (p: Player | Player[] | null, message?: string) => void, \n    chooseRandomNewGame: () => void\n}\n \nconst SkipGame: React.FC<SkipGameProps> = ({ makeWinnerAlert, chooseRandomNewGame }) => {\n    return (\n        <button className=\"button is-danger\" onClick={() => {\n            makeWinnerAlert(null, \"Skipped.\");\n            chooseRandomNewGame();\n        }} >Skip</button>\n    )\n}\n \nexport default SkipGame;\n ","import React, { useState, useEffect } from 'react';\nimport Party from '../Components/Party/Party'\nimport WheelComponent from '../Components/WheelComponent/WheelComponent'\nimport BackToBack from '../Components/BackToBack/BackToBack';\nimport Trivia from '../Components/Trivia/Trivia'\nimport Player from '../model/Player'\nimport IGameModuleService from '../model/IGameModuleService'\nimport GameService from '../model/GameService'\nimport WinnerAlert from './WinnerAlert'\nimport Scoreboard from './Scoreboard';\nimport SkipGame from './SkipGame';\n\n\ntype GameProps = {\n  gameModuleService: IGameModuleService | undefined,\n  players: Player[],\n  gameService: GameService,\n  activeGames: any[]\n}\n\nconst Game: React.FC<GameProps> =({ gameModuleService, players, gameService, activeGames }) => {\n    \n    const gameModules = [WheelComponent, Party, BackToBack, Trivia];\n    const [currentGameIndex, setCurrentGameIndex] = useState(1);\n    const [triviaEvents, setTriviaEvents] = useState<GameEventAPI | undefined>(undefined)\n    const [backToBackEvents, setBackToBackEvents] = useState<GameEventAPI | undefined>(undefined)\n    const [partyEvents, setPartyEvents] = useState<GameEventAPI | undefined>(undefined)\n    const [winners, setWinners] = useState<Player[] | null>([]);\n    const [flash, setFlash] = useState<string | undefined>();\n    const [currentQuestion, setCurrentQuestion] = useState<object | number>(-1)\n\n\n    // Load data to game events\n    useEffect(() => {\n        if (!gameModuleService) return\n\n        setTriviaEvents(gameModuleService.getTriviaEvents())\n        setBackToBackEvents(gameModuleService.getBackToBackEvents())\n        setPartyEvents(gameModuleService.getPartyEvents())\n\n    }, [gameModuleService])\n\n    /**\n     * This function is sent to game modules as a prop. \n     * If any winner is declared, they are passed as parameters to this function\n     * \n     * @param p The winner(s). Null means no points awarded. \n     * @param message A custom flash message for the winner, for example \"Wrong answer\". \n     * @author Delfi\n     */\n     const makeWinnerAlert = (p: Player | Player[] | null, message?: string): void => {\n        if (Array.isArray(p)) { // If there are several winners\n            setWinners(p); // This is the new array\n        } else if (p === null) { // null == no points awarded, lost game\n            setWinners(null);\n         } else if (p instanceof Player) { // Just one player?\n            setWinners([p]); // Send an array with only that player. \n        } else {\n            throw new Error(\"You need to pass an array of Players, a Player or null.\");\n        }\n        if (message) {\n            setFlash(message);\n        } else {\n            setFlash(undefined)\n        }\n    }\n    /**\n     * Selects a new game at random if it is activated.\n     */\n    const chooseRandomNewGame = (): void => {\n        const newGameIndex: number = gameService.getNewGameIndex(currentGameIndex, gameModules, activeGames)\n        setCurrentGameIndex(newGameIndex);\n        setEventCurrentQuestion(newGameIndex)\n    }\n\n    /**\n     * Function that get question from current game-module and save it in state.\n     * \n     */\n     const setEventCurrentQuestion = (currentGameIndex: number) => {\n      let currentGame: any;\n      switch (currentGameIndex) {\n        case 3:\n          if(!triviaEvents) return\n          currentGame = gameService.getRandomGameEvent(triviaEvents);\n          break;\n        case 2:\n          if(!backToBackEvents) return\n          currentGame = gameService.getRandomGameEvent(backToBackEvents);\n          break;\n        case 1:\n          if(!partyEvents) return\n          currentGame = gameService.getRandomGameEvent(partyEvents)\n          break;\n      }\n      setCurrentQuestion(currentGame)\n    }\n    /**\n     * TODO: Explain method\n     * @author Anonymous\n     * @param gameEventId \n     * @param gameEvents \n     */\n    const removeGameEvent = (gameEventId: string, gameEvents: GameEventAPI): void => {\n        gameEvents.questions.filter((question: ITrivia | IParty | IBackToBack) => {\n            return question._id !== gameEventId        \n        })\n    }\n\n    const gameServiceProps = {\n        players: players,\n        getPlayers: gameService.getPlayers, \n        addScore: gameService.addScore, \n        makeWinnerAlert: makeWinnerAlert, \n        chooseRandomNewGame: chooseRandomNewGame,\n        removeGameEvent: removeGameEvent\n    };\n\n    if (!triviaEvents || !backToBackEvents || !partyEvents) {\n        return (<div><p>Loading...</p></div>)\n    }\n\n    // If to many paused players\n    if (gameService.getNumActivePlayers(players) < 2) {\n      return <h1>Too many players are paused. Please wait for them and start their session again!</h1>\n    }\n\n    let currentGame;\n    switch (currentGameIndex) {\n      case 3: \n        currentGame = <Trivia gameService={gameServiceProps} gameEvent={currentQuestion}/>;\n        break;\n      case 2:\n        currentGame = <BackToBack gameService={gameServiceProps} gameEvent={currentQuestion}/>;\n        break;\n      case 1:\n        currentGame = <Party gameService={gameServiceProps} gameEvent={currentQuestion}/>;\n        break;\n      case 0:\n        currentGame = <WheelComponent gameService={gameServiceProps} />;\n        break;\n    }\n\n    if (!triviaEvents || !backToBackEvents || !partyEvents) {\n      return (<div><p>Loading...</p></div>)\n    } else if(currentQuestion < 0) {\n      chooseRandomNewGame()\n      return (<h1>Hej</h1>)\n    }\n\n    return (\n      <div className=\"Game\">\n          <WinnerAlert winners={winners} message={flash} />\n          <Scoreboard players={players} />\n          {currentGame}\n          <SkipGame makeWinnerAlert={makeWinnerAlert} chooseRandomNewGame={chooseRandomNewGame} />\n      </div>\n    );\n}\n\nexport default Game;","/**\r\n* A component that renders an error message on the start screen.\r\n* \r\n* @author Susanna Persson\r\n*/\r\n\r\nfunction ErrorMsg(props: any) {\r\n        return (\r\n            <div className=\"box nameerror\">\r\n                {props.message}\r\n            </div>\r\n            );\r\n}\r\n \r\nexport default ErrorMsg;","import React from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPause, faPlayCircle, faTrashAlt } from '@fortawesome/free-solid-svg-icons'\n\nfunction PlayerSettingBox({player, updatePlayerActive, deletePlayer}: any) {\n\n  return (\n    <div className=\"box is-flex is-flex-direction-row is-align-items-center is-justify-content-space-between\" >\n      <p className=\"subtitle\" style={{margin: '0'}}>{player.name}</p>\n      <div className=\"btn-group\" style={{display: 'flex'}}>\n        <FontAwesomeIcon color={player.isActive ? 'orange' : 'blue'} icon={player.isActive ? faPause : faPlayCircle} cursor=\"pointer\" onClick={() => updatePlayerActive(player.name)}/>\n        <FontAwesomeIcon color=\"red\" className=\"ml-3\" icon={faTrashAlt} cursor=\"pointer\" onClick={() => deletePlayer(player.name) }/>\n      </div>\n    </div>\n  );\n}\n\nexport default PlayerSettingBox;","import './App.css';\r\n\r\nfunction ComponentGetToKnow() {\r\n    return(        \r\n    <div >\r\n        <button className=\"button is-danger\" onClick={() => {\r\n            window.location.reload();\r\n        }}>Reload page</button>\r\n    </div>);\r\n}\r\n\r\nexport default ComponentGetToKnow;","import React, { useState } from 'react';\nimport './Navbar.css'\nimport Player from '../../model/Player'\n// import 'bulma/css/bulma.css'\nimport PlayerSettingBox from './PlayerSettingBox';\nimport ResetButton from '../../App/ResetButton';\n\nexport interface IGameModuleSetting {\n  name: string,\n  active: boolean,\n  index: number\n}\n\nexport type NavbarProps = {\n  navbarOpen: boolean,\n  players: Player[],\n  gameModuleSettings: IGameModuleSetting[],\n  updatePlayerActive: (playerName: string) => void,\n  onGameModuleSettingUpdate: (gameModuleSettings: IGameModuleSetting[]) => void,\n  deleteUser: (userName: string) => void,\n  addUser: (newUserName: string) => void\n}\n\nconst Navbar: React.FC<NavbarProps> = ({ \n  navbarOpen, players, gameModuleSettings, \n  updatePlayerActive, onGameModuleSettingUpdate, deleteUser, addUser }) => {\n\n  const [inputName, setInputName] = useState('')\n\n  /**\n   * Update active game-modules. Fires of when user clicks on a checkbox in settings-menu.\n   */\n  const updateActiveGameModule = (e: any, moduleName: string) => {\n    e.preventDefault()\n\n    let activeModules = 0\n\n    for(let i = 0; i < gameModuleSettings.length; i++) {\n      if(gameModuleSettings[i].active) activeModules++\n    }\n\n    const copiedArray = [...gameModuleSettings]\n    // Error checking, cannot disable if every module is disabled\n    for(let i = 0; i < copiedArray.length; i++) {\n      if(copiedArray[i].name === moduleName) {\n        if(copiedArray[i].active) {\n          // 2 game modules must be active!\n          if(activeModules === 2) {\n            console.log('Atleast 2 game modules must be enabled')\n            return\n          }\n        }\n\n        copiedArray[i].active = !copiedArray[i].active\n        break;\n      }\n    }\n    onGameModuleSettingUpdate(copiedArray)    \n  }\n\n  /**\n   * Function that calls delete-player function in parent-component after error-checking.\n   */\n  const deletePlayer = (playerName: string) => {\n    if (players.length <= 2) {\n      // Cannot delete player, just one player left\n      // Error checking\n      return\n    }\n    deleteUser(playerName)\n  }\n  \n  return (\n    <nav>\n      <div className={(\"links \") +  (navbarOpen ? \"nav-open\" : \"\")}>\n        {/* Bulma menu */}\n        <aside className=\"menu is-flex is-flex-direction-column\" style={{padding: '12px', height: '100%'}}>\n          <h2 className=\"subtitle\">Settings</h2>\n\n          {/* Game module settings */}\n          <p className=\"menu-label\">Game Modules</p>\n          <ul className=\"menu-list\">\n            {gameModuleSettings.map((module: IGameModuleSetting, index: number) => {\n              return (\n              <li key={index}>\n                <a href=\"/\" onClick={(e: any) => updateActiveGameModule(e, module.name)}>\n                  <label className=\"checkbox\"><input type=\"checkbox\" onChange={() => (module.active)} checked={module.active} style={{marginRight: '8px'}}/>{module.name} Module</label>\n                </a>\n              </li>)\n            })}\n          </ul>\n\n          <p className=\"menu-label\">Add Player</p>\n          {/* Name input */}\n          <div className=\"field has-addons\">\n            <div className=\"control\">\n              <input className=\"input\" type=\"text\" placeholder=\"Input name\" onChange={e => setInputName(e.target.value)} />\n            </div>\n            <div className=\"control\">\n              <button className=\"button is-info\" onClick={() => addUser(inputName)}>Add</button>\n            </div>\n          </div>\n          {/* Names */}\n          <p className=\"menu-label\">Players</p>\n          <ul className=\"menu-list\" style={{overflowY: 'scroll'}}>\n            {players.map((player: Player, index: number) => {\n              return <PlayerSettingBox deletePlayer={deletePlayer} player={player} key={index} updatePlayerActive={updatePlayerActive}/>\n            })}\n          </ul>\n          <ResetButton />\n        </aside>\n      </div>\n    </nav>\n  );\n}\n\nexport default Navbar;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCog } from '@fortawesome/free-solid-svg-icons'\n/* https://fontawesome.com/how-to-use/on-the-web/using-with/react */\n\nfunction Icon({setNavbarOpen}: {setNavbarOpen: React.Dispatch<React.SetStateAction<boolean>>}) {\n  return (\n    <div style={{padding: '8px 16px'}}>\n      <FontAwesomeIcon icon={faCog} color='grey' size='2x' cursor=\"pointer\" onClick={() => setNavbarOpen(true)}/>\n    </div>\n  );\n}\n\nexport default Icon;","/**\n * Enum containing game module names. These names\n * are used for the indexedDB tables and the api calls\n * for each game module.\n */\nexport enum  GameModuleName {\n    TRIVIA = 'trivia',\n    PARTY = 'party',\n    BACK_TO_BACK = 'back-to-back'\n}\n\n/**\n * Helper function to iterate over the keys of a string enum.\n * Ref: https://www.petermorlion.com/iterating-a-typescript-enum/.\n * \n * @param obj - The string enum class to ierate over.  \n * \n * @returns The keys of the string enum.\n */\nexport function enumKeys<O extends object, K extends keyof O = keyof O>(obj: O): K[] {\n    return Object.keys(obj).filter(k => Number.isNaN(+k)) as K[];\n}\n\n","import axios, { AxiosResponse } from 'axios'\nimport IUtilService from './IUtilService'\n\n/**\n * Class API containing utility methods for api calls to the server.\n * \n * @implements {IUtilService}\n */\nexport default class API implements IUtilService {\n\n\n  private readonly baseUrl: string = `${process.env.REACT_APP_SERVER_URL}/api/`\n\n  /**\n   * Utility methos that check server API status.\n   *  \n   * @returns {Promise<boolean>} - True if api is aviailable else false. \n   */\n  public async checkStatus(): Promise<boolean> {\n    try {\n      const response: AxiosResponse<connectionAPI> = await axios.get(this.baseUrl + 'status')\n\n      return response.data.connectionAPI === 1\n\n    } catch (error) {\n      console.log('No contact with the server API:', error)\n      return false\n    }\n  }\n\n  /**\n   * Utility method that return data for the requested api call.\n   *  \n   * @param {string} apiPath - The API path.\n   * \n   * @returns {Promise<GameEventAPI | undefined>} \n   * If api is available return the requested data for the specific apiPath.\n   * The api path is determined by the game module name. \n   */\n  public async getGameEvents(apiPath: string): Promise<GameEventAPI | undefined> {\n    try {\n      const response: AxiosResponse<GameEventAPI> = await axios.get(this.baseUrl + apiPath)\n\n      return response.data\n\n    } catch (error) {\n      console.log(`Error fetching game events for path ${this.baseUrl}${apiPath}:`, error)\n    }\n  }\n}","import { openDB, IDBPDatabase, deleteDB } from 'idb'\nimport IUtilService from './IUtilService'\nimport { GameModuleName, enumKeys } from './GameModuleName'\n\n/**\n * Class LocalDB containing utility methods for indexedDB. \n * \n * @implements {IUtilService}\n */\nexport default class LocalDB implements IUtilService {\n\n    private db: any\n    private readonly dbName: string  = 'WinnerDrinks'\n    private readonly dbVersion: number  = 1\n    \n    /**\n     * Open the database and upgrades it if needed.\n     * \n     * @return {Promise<void>}\n     */\n    public async openLocalDB(): Promise<void> {\n        try {\n\n            this.db = await openDB(this.dbName, this.dbVersion, { // use undefined for current version https://github.com/jakearchibald/idb#opendb \n                upgrade(db: IDBPDatabase, oldVersion, newVersion, transaction) {\n\n                    for (const name of enumKeys(GameModuleName)) {\n\n                        if (db.objectStoreNames.contains(GameModuleName[name])) {\n                            continue;\n                        }\n                        db.createObjectStore(GameModuleName[name], { keyPath: '_id' })\n                    }\n                },\n                blocked() {\n                    console.log('blocked')\n                },\n                blocking() {\n                    console.log('blocking')\n                },\n                terminated() {\n                    console.log('terminated')\n                },\n            })\n\n        } catch (error) {\n            console.log('createObjectStores error:', error)\n        }\n    }\n\n    /**\n     * Load the database using game module names as table names.\n     * \n     * @return {Promise<void>}\n     */\n    public async loadDB(): Promise<void> {\n        const gameEventsPromises: Promise<void>[] = [] \n\n        for (const name of enumKeys(GameModuleName)) {\n            gameEventsPromises.push(this.loadAndFetchGameEvents(GameModuleName[name]))\n        }\n     \n        Promise.all(gameEventsPromises).catch(error => console.log('Load DB error:', error))\n    }\n\n    /**\n     * Fetch the data using game module name as api paths.\n     * \n     * @return {Promise<void>}\n     */\n    private async loadAndFetchGameEvents(gameModuleName: string): Promise<void> {\n        try {\n            const gameEvents: (IBackToBack | ITrivia | IParty)[] = []\n            const response: any = await fetch(`${process.env.PUBLIC_URL}/api/${gameModuleName}`)\n\n            console.log('api call:', `${process.env.PUBLIC_URL}/api/${gameModuleName}`)\n            console.log('response:', response)\n            \n            if (response) {\n                const responseJSON: any = await response.json()\n                responseJSON.questions.forEach((question: IBackToBack) => gameEvents.push(question))    \n            }\n\n            this.loadTable(gameEvents, gameModuleName)\n\n        }  catch (error) {\n            console.log(`Error when loading game events for game module ${gameModuleName}:`, error)\n        }\n    }\n\n    /**\n     * Load the database using game module names as table names.\n     * \n     * @return {Promise<void>}\n     */\n    private async loadTable(gameEvents: (IBackToBack | ITrivia | IParty)[], gameModuleName: string): Promise<void> { \n        try {\n            const transaction = this.db.transaction(gameModuleName, 'readwrite');\n            const store = transaction.objectStore(gameModuleName);\n            \n            for (const question of gameEvents) {\n                await store.put(question);\n            }\n        \n        } catch (error) {\n            console.log(`Error when loading indexedDB table for game module ${gameModuleName}:`, error)\n        }\n    }   \n\n    /**\n     * Get data from indexedDB using.\n     *\n     * @param  {string} gameModuleName - name of a game module. \n     * @return {Promise<GameEventAPI | undefined>} - The game events for the game module or undefined if error. \n     */\n    public async getGameEvents(gameModuleName: string): Promise<GameEventAPI | undefined> {\n        try {\n            const transaction = this.db.transaction(gameModuleName, 'readonly')\n            const store = transaction.objectStore(gameModuleName)\n            const questions = await store.getAll()\n            return { questions: questions }\n        \n        } catch (error) {\n            console.log('error:', error)\n        }\n    }\n\n    /**\n     * Delete the database.\n     * \n     * @return {Promise<void>}\n     */\n    public async deleteLocalDB(): Promise<void> {\n        await deleteDB(this.dbName)\n    }\n}","import IUtilService from \"./IUtilService\"\nimport API from './API'\nimport LocalDB from \"./LocalDB\"\n\n/**\n * Factory method that return an instance of a type IUtilservice.\n * \n * @returns {Promis<IUtilservice>}\n */\nexport default async function getUtilService(): Promise<IUtilService> {    \n\n    const api: API = new API()\n    const localDB: LocalDB = new LocalDB()\n\n    // If production and indexedDB is supported then first return an instance of\n    // API else return an instance of instance of LocalDB. \n    if (window.indexedDB && process.env.NODE_ENV === 'production') { \n        if (await api.checkStatus()) { // If api avilable return data from api\n            return api\n            \n        } else {\n            await localDB.openLocalDB() // return data from indexed db\n            return localDB    \n        }\n        \n    // If indexedDB is NOT supported or NOT in production then return\n    // instance of API.    \n    } else {\n        return api\n    }\n}\n","import IUtilService from '../util/IUtilService'\nimport getUtilService from '../util/UtilServiceFactory'\nimport { GameModuleName } from '../util/GameModuleName'\nimport IGameModuleService from './IGameModuleService'\n\n/**\n * Class containing methods to get game events for \n * specific game modules.\n * \n * @implements IGameModuleService\n */\nexport default class GameModuleService implements IGameModuleService {\n\n    // Data game events\n    private triviaEvents: GameEventAPI | undefined\n    private partyEvents: GameEventAPI | undefined\n    private backToBackEvents: GameEventAPI | undefined\n \n    /**\n     * Load game events for game modules.\n     * \n     * @return {Promise<void>}\n     */\n    public async loadGameEvents(): Promise<boolean> {\n        const utilsService: IUtilService = await getUtilService()\n\n        return Promise.all([\n            utilsService.getGameEvents(GameModuleName.TRIVIA), \n            utilsService.getGameEvents(GameModuleName.PARTY), \n            utilsService.getGameEvents(GameModuleName.BACK_TO_BACK)])\n        .then((response) => {\n            this.triviaEvents = response[0]\n            this.partyEvents = response[1]\n            this.backToBackEvents = response[2]\n            return true\n        })\n        .catch((error) => {\n            return false\n        })\n    }\n\n    /**\n     * Method that returns the game events for game module trivia.\n     * \n     * @returns {GameEventAPI | undefined}\n     */\n    public getTriviaEvents(): GameEventAPI | undefined {\n        return this.triviaEvents\n    }\n    \n    /**\n     * Method that returns the game events for game module party.\n     * \n     * @returns {GameEventAPI | undefined}\n     */\n    public getPartyEvents(): GameEventAPI | undefined {\n        return this.partyEvents\n    }\n\n    /**\n     * Method that returns the game events for game module back-to-back.\n     * \n     * @returns {GameEventAPI | undefined}\n     */\n    public getBackToBackEvents(): GameEventAPI | undefined {\n        return this.backToBackEvents\n    }\n}\n","import Player from './Player'\nimport { TextGameModuleProps, AnimationGameModuleProps } from '../Components/GameModuleProps'\n\nexport default class GameService {\n\n    public addScore = (p: Player, score: number) => {\n        p.addScore(score)\n    }\n\n    public getNewGameIndex = (currentGameIndex: number, gameModules: (React.FC<TextGameModuleProps> | React.FC<AnimationGameModuleProps>)[], activeGames: any[]): number => {\n        let newIndex = currentGameIndex\n        while (newIndex === currentGameIndex || !activeGames[newIndex].active) { // Don't allow the same game twice in a row. \n            newIndex = Math.floor(Math.random() * gameModules.length)\n        }\n        return newIndex\n    }\n    /**\n     * \n     * @param nrOfPlayers The amount of players you need for the component\n     * @param players An array of players that the function will fetch from. \n     * @returns A sublist from your array that contains the requested amount of active players. \n     */\n    public getPlayers = (nrOfPlayers: number, players: Player[]): Player[] => {\n        const activePlayers: Player[] = [];\n        \n        for (let i = 0; i < players.length; i++) {\n            if (players[i].isActive) {\n                activePlayers.push(players[i])\n            }\n            \n        }\n\n        this.shuffle(activePlayers);\n        \n        return activePlayers.slice(0, nrOfPlayers);\n    }\n\n    private shuffle(array: Player[]) {\n        var m = array.length, t, i;\n        while (m) {\n            i = Math.floor(Math.random() * m--);\n            t = array[m];\n            array[m] = array[i];\n            array[i] = t;\n        }\n        return array;\n    }\n\n    public getRandomGameEvent = (gameEventAPI: GameEventAPI): IBackToBack | IParty | ITrivia => {\n        return gameEventAPI.questions[Math.floor(Math.random() * gameEventAPI.questions.length)]\n    }\n\n    public getNumActivePlayers = (players: Player[]): number => {\n        let numOfActivePlayers = 0\n\n        players.forEach(player => {\n            if(player.isActive) numOfActivePlayers++  \n        })\n\n        return numOfActivePlayers\n      }\n}","import GameModuleService from './GameModuleService'\nimport IGameModuleService from './IGameModuleService'\nimport GameService from './GameService'\n\n/**\n * Factory method that return a promise of an instance \n * of a type IGameModuleSerice with loaded game events or\n * undefined if GameModules coulde not be loaded.\n * \n * @returns {Promis<IUtilservice | undefined>}\n */\nexport async function getGameModuleService(): Promise<IGameModuleService | undefined> {\n\n    const gameModuleSerivce: IGameModuleService = new GameModuleService()\n    const gameEventIsLoaded: boolean = await gameModuleSerivce.loadGameEvents()\n\n    if (!gameEventIsLoaded) {\n        return\n    }\n\n    return gameModuleSerivce\n}\n\n/**\n * Factory method that return  an instance \n * of a type IGameService.\n * \n * @returns {GameService}\n */\n export function getGameService(): GameService {\n    return new GameService()\n}","import React, { useState, useEffect } from 'react'\nimport Login from './Login'\nimport Game from './Game'\nimport Player from '../model/Player'\nimport 'bulma'\nimport './App.css'\nimport ErrorMsg from './ErrorMsg'\nimport Navbar from '../Components/Menu/Navbar'\nimport Icon from '../Components/Menu/Icon'\nimport IGameModuleService from '../model/IGameModuleService'\nimport { getGameModuleService, getGameService } from '../model/ModuleFactory'\nimport GameService from '../model/GameService'\nimport { IGameModuleSetting } from '../Components/Menu/Navbar'\n\n\nfunction App() {\n  const gameService: GameService = getGameService();\n  const [gameModuleService, setGameModuleSerivce] = useState<IGameModuleService>()\n  const [players, setPlayers] = useState<Player[]>([]);\n  const [play, setPlay] = useState(false);\n  const [nameerror, setError] = useState(false);\n  const [navbarOpen, setNavbarOpen] = useState(false);\n  const [gameModuleSettings, setGameModuleSettings] = useState<IGameModuleSetting[]>([\n    { name: 'Wheel', active: true, index: 0 },\n    { name: 'Party', active: true, index: 1 }, \n    { name: 'BackToBack', active: true, index: 2 }, \n    { name: 'Trivia', active: true, index: 3 }, \n  ])\n\n  useEffect(() => {\n    getGameModuleService().then((gms: IGameModuleService | undefined) => {setGameModuleSerivce(gms)})\n  }, [])\n\n  /**\n   * Function that deletes an added player by name.\n   * @param palyerName Name of Player to be deleted from state.\n   */\n  const deleteUser = (playerName: string): void => {\n    const updatedPlayers: Player[] = [...players]\n    const index = updatedPlayers.findIndex((player: Player) => player.name === playerName)\n    if (index >= 0) {\n      updatedPlayers.splice(index, 1)\n      setPlayers(updatedPlayers);\n    }\n  }\n\n  const gameModuleSettingUpdate = (gameModuleSettings: IGameModuleSetting[]): void => {\n    setGameModuleSettings(gameModuleSettings)\n  }\n\n  /**\n   * Function updating the state of the player. If (s)he is active or paused.\n   */\n  const updatePlayerActive = (playerName: string): void => {\n    const updatedPlayers: Player[] = [...players]\n    updatedPlayers.forEach((player) => player.name === playerName ? player.isActive = !player.isActive : false)\n    setPlayers(updatedPlayers)\n  }\n\n  const addUser = (newPlayerName: string): void => {\n    try {\n      const newPlayer = new Player(newPlayerName);\n      setPlayers([...players, newPlayer]);\n    } catch (error) {\n      window.alert(error) //For now.\n    }\n  };\n\n  if (!gameModuleService) {\n    return (\n      <div><p>Loading...</p></div>\n      )\n    }\n\n  if (!play) {\n    if (!nameerror) {\n      return (\n        <div>\n\n        {/* Navbar */}\n        <Icon setNavbarOpen={setNavbarOpen} />\n        <Navbar \n          navbarOpen={navbarOpen}\n          players={players}  \n          gameModuleSettings={gameModuleSettings} \n          addUser={addUser} \n          deleteUser={deleteUser} \n          onGameModuleSettingUpdate={gameModuleSettingUpdate} \n          updatePlayerActive={updatePlayerActive} />\n\n        <div className=\"App section\" onClick={() => navbarOpen ? setNavbarOpen(false) : undefined}>\n\n          <Login addUser={addUser} />\n            <input className=\"button\" type=\"button\" value=\"Done\" onClick={() => {\n            // must be at least two players. \n            if (players.length < 2) {\n              setError(true);\n            } else {\n              setPlay(true); \n            }\n            }} />\n          <h2 className=\"title is-5\" >Players</h2>\n          <ul className=\"columns\">\n            {players.map(player =>\n              (<li className=\"column\" key={player.toString()}>{player.toString()}</li>)\n            )}\n          </ul>\n        </div>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n\n        {/* Navbar */}\n        <Icon setNavbarOpen={setNavbarOpen} />\n        <Navbar\n          navbarOpen={navbarOpen}\n          players={players}  \n          gameModuleSettings={gameModuleSettings} \n          addUser={addUser} \n          deleteUser={deleteUser} \n          onGameModuleSettingUpdate={gameModuleSettingUpdate} \n          updatePlayerActive={updatePlayerActive} />\n        \n        <div className=\"App section\" onClick={() => navbarOpen ? setNavbarOpen(false) : undefined}>\n          <Login addUser={addUser} />\n            <input className=\"button\" type=\"button\" value=\"Done\" onClick={() => {\n            // must be at least two players. \n            if (players.length < 2) {\n              setError(true);\n            } else {\n              setPlay(true); \n            }\n            }} />\n          <ErrorMsg message='There needs to be at least two players to start the game!'></ErrorMsg>\n          <h2 className=\"title is-5\" >Players</h2>\n          <ul className=\"columns\">\n            {players.map(player =>\n              (<li className=\"column\" key={player.toString()}>{player.toString()}</li>)\n            )}\n          </ul>\n        </div>\n        </div>\n\n      );\n    }\n  } else {\n    return (\n      <div>\n      {/* Navbar */}\n      <Icon setNavbarOpen={setNavbarOpen} />\n      <Navbar\n        navbarOpen={navbarOpen}\n        players={players}  \n        gameModuleSettings={gameModuleSettings} \n        addUser={addUser} \n        deleteUser={deleteUser} \n        onGameModuleSettingUpdate={gameModuleSettingUpdate} \n        updatePlayerActive={updatePlayerActive} />\n    \n      <div className=\"App section\" onClick={() => navbarOpen ? setNavbarOpen(false) : undefined}>\n        <h1 className=\"title is-3\">Let's play!</h1>\n        <Game activeGames={gameModuleSettings} gameService={gameService} players={players} gameModuleService={gameModuleService} />\n      </div>\n      </div>\n    )\n  };\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) { \n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n"],"sourceRoot":""}