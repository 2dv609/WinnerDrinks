{"version":3,"sources":["Login.tsx","Components/Party/Party.tsx","Player.tsx","Components/WheelComponent/WheelComponent.tsx","Components/BackToBack/BackToBack.tsx","Components/Trivia/utils/api-functions.ts","Components/Trivia/utils/functions.ts","Components/Trivia/QuestionCard.tsx","Components/Trivia/Trivia.tsx","util/API.ts","util/DB.ts","Game.tsx","ResetButton.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["Login","props","useState","input","setInput","className","type","value","name","id","onChange","e","target","length","onClick","setter","Party","gp","getPlayers","players","setPlayers","useEffect","gameEvent","question","replace","addScore","makeWinnerAlert","chooseRandomNewGame","toString","Player","isActive","score","Error","trim","this","newScore","points","debug","colors","style","animationName","animationTimingFunction","animationDuration","animationDelay","animationIterationCount","animationDirection","animationFillMode","marginBottom","WheelComponent","list","rotateDeg","isReset","setIsReset","result","setResult","errorMessage","setErrorMessage","randomIntFromInterval","min","max","Math","floor","random","startSpin","winnerIndex","degrees","index","degreeWinner","getRandomRotationDegrees","styleSheet","document","styleSheets","keyframes","insertRule","cssRules","setTimeout","getWinner","TIME","console","log","winner","reset","deleteRule","error","margin","map","val","degree","transform","borderRight","BackToBack","formatAPIResponseString","spanTag","createElement","innerHTML","shuffleArray","a","i","j","QuestionCard","answer","handleAnswer","Trivia","loadedQuestions","setLoadedQuestions","questionNumber","setQuestionNumber","event","loadNewQuestions","all_answers","incorrect_answers","push","correct_answer","innerText","answerString","uuid","API","baseUrl","axios","get","questions","data","DB","dbName","triviaEvents","partyEvents","backToBackEvents","db","openDB","transaction","store","objectStore","getAll","Game","games","currentGameIndex","setCurrentGameIndex","undefined","setTriviaEvents","setBackToBackEvents","setPartyEvents","api","process","window","indexedDB","getTrivia","getBackToBack","getParty","Promise","all","then","response","getRandomGameEvent","gameEventAPI","gameProps","amount","array","t","m","shuffle","p","str","Array","isArray","forEach","element","alert","newIndex","ComponentGetToKnow","location","reload","App","names","setNames","play","setPlay","ResetButton","newUserName","newUser","item","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","URL","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.9dccc2d0.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nfunction Login(props: any) {\n  const [input, setInput] = useState('');\n  return (\n    <div className=\"Login box\">\n      <h1 className=\"title\">Add all players</h1>\n      <input className=\"input\" type=\"text\" value={input} name=\"newname\" id=\"newname\" onChange={e => {\n        if ((e.target as any).value.length > 10) return;\n        setInput((e.target as any).value);\n      }} />\n      <input className=\"button\" type=\"button\" onClick={() => {\n        props.setter(input);\n        setInput('');\n\n      }} value=\"Add\" id=\"newnamebtn\" />\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState, useEffect } from 'react';\nimport GameProps from '../GameProps';\n\nfunction Party(props: any) {\n    const gp: GameProps = props.gp;\n    const [players, setPlayers] = useState(gp.getPlayers(2));\n    \n    function addPlayerToGameEvent(): string {\n        const gameEvent:string = props.gameEvent.question\n        return gameEvent.replace('{players[0]}', `${players[0]}`).replace('{players[1]}', `${players[1]}`)\n    }\n\n    useEffect(() => { \n        return () => { // Return a function for code cleanup. This will set new players \n            setPlayers(gp.getPlayers(2));\n        }\n    }, [gp])\n\n    return (\n        <div className=\"box\">\n            <div className=\"content\">{addPlayerToGameEvent()}</div>\n            <h3>Who won?</h3>\n\n            <button className=\"button\" onClick={() => {\n                gp.addScore(players[0], 1)\n                gp.makeWinnerAlert(players[0])\n                gp.chooseRandomNewGame()\n            }}>{players[0].toString()}</button>\n\n            <button className=\"button\" onClick={() => {\n                gp.addScore(players[1], 1)\n                gp.makeWinnerAlert(players[1])\n                gp.chooseRandomNewGame()\n            }}>{players[1].toString()}</button>\n\n        </div>\n    )\n};\n\nexport default Party;","/**\n * A player class for keeping track of the player names, \n * their score and whether they are currently active in the game or not. \n * @author Delfi Sehidic\n */\n\nclass Player {\n    name: string; // The name of the player as registered in the input\n    isActive: boolean; // Is the player currently playing or paused for e.g. a bathroom visit?\n    score: number;\n\n    /**\n     * Constructs a new player object. \n     * @param name Must be at least 3 characters long and not exceed 10.\n     */\n    constructor(name: string) {\n        if (name.length < 3 || name.length > 10) {\n            throw Error(\"Name must be at least 3 characters and not exceed 10.\");\n        };\n        if (name && !name.trim()) {\n            throw Error(\"Name cannot be empty.\");\n        };\n        this.name = name;\n        this.isActive = true;\n        this.score = 0;\n    }\n    /**\n     * Overwrites the old score of the player and sets it to newScore. \n     * @param newScore \n     */\n    setScore(newScore: number) {\n        this.score = newScore;\n    };\n    /**\n     * Updates the score. For example, if the score is 10 and points is 1, the score will now be 11. \n     * \n     * @param points Added to the existing score. Can be negative. \n     */\n    addScore(points: number) {\n        this.score += points;\n    };\n    /**\n     * Returns a string representation of the player. \n     * @param debug If set to true, it also returns the score and activity of the player. \n     * @returns Player name or full player stats. \n     */\n    toString(debug?:boolean): string {\n        if (debug) {\n            return `Name: ${this.name} Score: ${this.score} isActive: ${this.isActive}`;\n        }\n        return this.name;\n    }\n}\n\nexport default Player;","import React, { useState } from 'react';\nimport GameProps from '../GameProps';\nimport './WheelComponent.css'\n\nconst DEG = 360\nconst colors = ['#9ede73', '#f7ea00', '#e48900', '#be0000']\nconst TIME = 3\n\nlet style = {\n  animationName: 'spin',\n  animationTimingFunction: 'ease-in-out',\n  animationDuration: `${TIME}s`,\n  animationDelay: '0.0s',\n  animationIterationCount: 1,\n  animationDirection: 'normal',\n  animationFillMode: 'forwards',\n  marginBottom: '2rem'\n};\n\n/**\n * \n * @param {Array} users Array of participant names. \n * @returns {jsx} Component\n */\nfunction WheelComponent(props: any) {\n  // Error checking number of users. If < 4 => duplicate one of the users / If > 4 => skip one of the users\n  const gp: GameProps = props.gp;\n  const list = gp.getPlayers(4);\n  const rotateDeg = DEG / list.length\n  const [isReset, setIsReset] = useState(true)\n  const [result, setResult] = useState('')\n  const [errorMessage, setErrorMessage] = useState('')\n  \n  /**\n   * Function that generate random integer in span (min and max included).\n   * @param {Number} min Min number\n   * @param {Number} max Max number\n   * @returns {Number} Random number generated\n   */\n  const randomIntFromInterval = (min: number, max: number): number => Math.floor(Math.random() * (max - min + 1) + min);\n\n  /**\n   * Function that generates random degrees that the wheel will spin.\n   * @param {Number} index Index of the winning element\n   * @returns {Number} Degrees generated\n   */\n  const getRandomRotationDegrees = (index: number): number => {\n    let degreeWinner: number = 0;\n    switch(index) {\n      case(0):\n        degreeWinner = randomIntFromInterval(226, 315)\n        break\n      case(1):\n        degreeWinner = randomIntFromInterval(136, 225)\n        break\n      case(2):\n        degreeWinner = randomIntFromInterval(46, 135)\n        break\n      case(3):\n        degreeWinner = randomIntFromInterval(0, 45)\n        break\n      default:\n      break\n    }\n\n    const rotateDegrees = 360 * 4 + degreeWinner\n    return rotateDegrees\n  }\n  \n  /**\n   * Function that is called when user click spin-button.\n   * Calls the other function and set the winner.\n   */\n  const startSpin = () => {\n    if(isReset) {\n      setErrorMessage('')\n\n      const winnerIndex = randomIntFromInterval(1, list.length) - 1\n      const degrees = getRandomRotationDegrees(winnerIndex)\n    \n      let styleSheet = document.styleSheets[0];\n\n      let keyframes = `\n      @keyframes spin {\n        from {transform:rotate(0deg);}\n        to {transform:rotate(${degrees}deg);}\n      }`\n    \n      styleSheet.insertRule(keyframes, styleSheet.cssRules.length);\n    \n      setTimeout(() => getWinner(winnerIndex), (TIME) * 1000 + 500);\n    } else {\n      setErrorMessage('Please reset the wheel...')\n      console.log('Please reset the wheel...')\n    }\n\n    setIsReset(false)\n  }\n\n  /**\n   * Function that gets and sets the winner.\n   * @param {Number} index \n   */\n  const getWinner = (index: number) => {\n    const winner = list[index]\n    console.log(`Winning value is: ${winner.toString()}`)\n    setResult(`${winner.toString()} won!`)\n    reset();\n\n    gp.addScore(winner, 1)\n    gp.makeWinnerAlert(winner)\n    gp.chooseRandomNewGame()\n\n  }\n\n  /**\n   * Function that resets the wheel and values.\n   */\n  const reset = () => {\n    try {\n      let styleSheet = document.styleSheets[0];\n      styleSheet.deleteRule(2)\n      setIsReset(true)\n      setErrorMessage('')\n      setResult('')\n    } catch (error) {\n      console.log('Stylesheet has already been reset...')\n      setErrorMessage('Stylesheet has already been reset...')\n    }\n  }\n\n  return (\n    \n    <div className=\"WheelComponent\">\n      <span style={{margin: '0px'}}>|</span>\n      <div onClick={startSpin} className=\"wheel\" style={style}>\n      {list.map((val, index) => {\n        const degree = (index * rotateDeg) //- 45\n        \n        return (\n          <div key={index} style={{transform: `rotate(${degree}deg)`, borderRight: `200px solid ${colors[index]}`}} className=\"arrow\">\n            <span>{val.toString()}</span>\n          </div>\n        )\n      })}\n      </div>\n      <div className=\"d-flex\">\n        <button onClick={startSpin}>Spin!</button>\n      </div>\n      <div>\n        <p>{errorMessage}</p>\n        <p>{result}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default WheelComponent;","import { useState, useEffect } from 'react';\nimport GameProps from '../GameProps';\nimport '../../App.css';\n\nconst NUM_OF_PLAYERS = 2; // How many players do you need? \n\nfunction BackToBack(props: any) {\n    const gp: GameProps = props.gp; // Contains the methods done and getPlayers. \n    const [players, setPlayers] = useState(gp.getPlayers(NUM_OF_PLAYERS)); // players is an array \n\n    useEffect(() => { \n        return () => { // Return a function for code cleanup. This will set new players \n\n            setPlayers(gp.getPlayers(NUM_OF_PLAYERS));\n        }\n    }, [gp])\n\n    // Either both win, or both lose.\n    return (\n        <div className=\"box container\">\n            <div className=\"content\">{props.gameEvent.question}</div>\n            <h3 className=\"title is-6\">Were both correct?</h3>\n\n            <button className=\"button\" onClick={() => {\n                gp.addScore(players[0], 1)\n                gp.addScore(players[1], 1)\n                gp.makeWinnerAlert(players)\n                gp.chooseRandomNewGame()\n            }}>{'They were correct!'}</button>\n            <button className=\"button\" onClick={() => {\n                gp.makeWinnerAlert(null)\n                gp.chooseRandomNewGame()\n            }}>{'They were wrong!'}</button>\n        </div>\n    )\n};\n\nexport default BackToBack;","export const formatAPIResponseString = (input: string) => {\n  let spanTag = document.createElement('span')\n  spanTag.innerHTML = input\n  return spanTag.innerHTML\n}\n","export const shuffleArray = (a: string[]):string[] => {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}","import React, { useEffect, useState } from 'react'\nimport './QuestionCard.css';\n\ntype Props = {\n  answer: string;\n  handleAnswer: any;\n}\n\nconst QuestionCard: React.FC<Props> = ({ answer, handleAnswer }) => {\n\n  useEffect(() => {\n  }, [])\n\n  return (\n\n      <div className={'questionDiv card'}\n        onClick={handleAnswer}>\n        {answer}\n      </div>\n\n  );\n}\n\nexport default QuestionCard;","import React, { useEffect, useState } from 'react'\nimport { uuid } from 'uuidv4'\nimport { formatAPIResponseString } from './utils/api-functions'\nimport { shuffleArray } from './utils/functions'\nimport './Trivia.css';\nimport QuestionCard from './QuestionCard';\nimport GameProps from '../GameProps';\n\nconst NUM_OF_PLAYERS = 1;\n\nconst Trivia = (props: any) => {\n  const gp: GameProps = props.gp;\n  const [players, setPlayers] = useState(gp.getPlayers(NUM_OF_PLAYERS));\n  const [loadedQuestions, setLoadedQuestions] = useState<ITrivia[]>([]);\n  const [questionNumber, setQuestionNumber] = useState<number>(0);\n\n  useEffect(() => {\n    console.log(props.event)\n    loadNewQuestions()\n  }, [])\n\n  useEffect(() => {\n    return () => { // Return a function for code cleanup. This will set new players \n      setPlayers(gp.getPlayers(NUM_OF_PLAYERS));\n    }\n  }, [gp])\n\n  const loadNewQuestions = async () => {\n    const gameEvent: ITrivia = props.gameEvent\n    let all_answers\n    all_answers = gameEvent.incorrect_answers\n    all_answers.push(gameEvent.correct_answer)\n    all_answers = shuffleArray(all_answers)\n    gameEvent.all_answers = all_answers\n    setLoadedQuestions([gameEvent]);\n  }\n\n  const handleAnswer = (e: any) => {\n    if (e.target.innerText === loadedQuestions[questionNumber].correct_answer) {\n      gp.addScore(players[0], 1)\n      gp.chooseRandomNewGame()\n      gp.makeWinnerAlert(players[0])\n    } else {\n      setQuestionNumber(questionNumber + 1);\n      gp.chooseRandomNewGame()\n      gp.makeWinnerAlert(null)\n    }\n  }\n\n  return (\n    <div className=\"box\">\n      <div id={'gameInfo'}>\n        <h4>Turn to answer a question: </h4>\n        <ul>\n          <li className=\"card\" >{players[0].name}</li>\n        </ul>\n        {/* {players.length > 0 && (\n          <ul>\n            {players.map((player, i) => {\n              return <li key={uuid()}>{player.name}</li>\n            })}\n          </ul>\n        )} */}\n      </div>\n\n      <br />\n      {loadedQuestions.length > 0 && (<h2>{formatAPIResponseString(loadedQuestions[questionNumber].question)}</h2>)}\n\n      {(loadedQuestions.length > 0) ?\n        <div className={'answersDiv'}>\n          <br />\n          {loadedQuestions[questionNumber].all_answers.map((answerString) => {\n            return <QuestionCard answer={formatAPIResponseString(answerString)} handleAnswer={handleAnswer} key={uuid()} />\n          })}\n        </div>\n        : <h4>Loading questions</h4>}\n\n    </div>\n  );\n}\n\nexport default Trivia;","import axios, { AxiosResponse } from 'axios'\n\nexport class API {\n\n  private baseUrl: string // = `${process.env.REACT_APP_SERVER_URL}/api/`\n\n  constructor(baseUrl: string) {\n    this.baseUrl = baseUrl;\n}\n\n  public async getTrivia(): Promise<GameEventAPI> {\n    try {\n      const questions : AxiosResponse<GameEventAPI> = await axios.get(this.baseUrl + 'trivia')\n\n      return questions.data\n    } catch (error)\n    {\n      throw new Error(error)    \n    }    \n  }\n\n  public async getBackToBack(): Promise<GameEventAPI> {  \n    try {\n      const questions : AxiosResponse<GameEventAPI> = await axios.get(this.baseUrl + 'back-to-back')\n\n      return questions.data\n    } catch (error)\n    {\n      throw new Error(error)    \n    }    \n  }\n\n  public async getParty(): Promise<GameEventAPI> {\n    try{\n      const questions : AxiosResponse<GameEventAPI> = await axios.get(this.baseUrl + 'party')\n\n      return questions.data\n    } catch (error)\n    {\n      throw new Error(error)    \n    }    \n  }\n}","import { openDB } from 'idb'\n\n\nexport class DB {\n\n    private db: any\n    private readonly dbName: string  // = 'WinnerDrinks'\n    private readonly triviaEvents: string  // = 'triviaEvents'\n    private readonly partyEvents: string // = 'partyEvents'\n    private readonly backToBackEvents: string // = 'backToBackEvents'\n\n    constructor(dbName: string, triviaEvents: string, partyEvents: string, backToBackEvents: string) {\n        this.dbName = dbName\n        this.triviaEvents = triviaEvents;\n        this.partyEvents = partyEvents;\n        this.backToBackEvents = backToBackEvents;\n    }\n\n    private async openDB(): Promise<boolean> {\n        try {\n            this.db = await openDB(this.dbName, 1)\n            return true\n        \n        } catch (error) {\n            console.log('error:', error)\n            return false\n        }\n    }   \n\n    public async getTrivia(): Promise<GameEventAPI> {\n        await this.openDB()\n        const transaction = this.db.transaction(this.triviaEvents, 'readonly');\n        const store = transaction.objectStore(this.triviaEvents);\n        const questions = await store.getAll();\n        // console.log('Get All Data', JSON.stringify(questions));\n        return { questions: questions };\n    }\n\n    public async getBackToBack(): Promise<GameEventAPI> {\n        await this.openDB()\n        const transaction = this.db.transaction(this.backToBackEvents, 'readonly');\n        const store = transaction.objectStore(this.backToBackEvents);\n        const questions = await store.getAll();\n        // console.log('Get All Data', JSON.stringify(questions));\n        return { questions: questions };;\n    }\n\n    public async getParty(): Promise<GameEventAPI> {\n        await this.openDB()\n        const transaction = this.db.transaction(this.partyEvents, 'readonly');\n        const store = transaction.objectStore(this.partyEvents);\n        const questions = await store.getAll();\n        // console.log('Get All Data', JSON.stringify(questions));\n        return { questions: questions };;\n    }\n}","import React, { useState, useEffect } from 'react';\nimport Party from './Components/Party/Party'\nimport Player from './Player'\nimport WheelComponent from './Components/WheelComponent/WheelComponent'\nimport BackToBack from './Components/BackToBack/BackToBack';\nimport Trivia from './Components/Trivia/Trivia'\n// import { AxiosResponse } from \"axios\"\nimport { API } from './util/API'\nimport { DB } from './util/DB'\n\n\nfunction shuffle(array: Player[]) {\n    var m = array.length, t, i;\n    while (m) {\n        i = Math.floor(Math.random() * m--);\n        t = array[m];\n        array[m] = array[i];\n        array[i] = t;\n    }\n    return array;\n}\n\nfunction Game(props: any) {\n    const games = [WheelComponent, Party, BackToBack, Trivia];\n    const [currentGameIndex, setCurrentGameIndex] = useState(1);\n    const [triviaEvents, setTriviaEvents] = useState<GameEventAPI | undefined>(undefined)\n    const [backToBackEvents, setBackToBackEvents] = useState<GameEventAPI | undefined>(undefined)\n    const [partyEvents, setPartyEvents] = useState<GameEventAPI | undefined>(undefined)\n    \n    // Load data to game events\n    useEffect(() => {\n        let triviaEvents:  Promise<GameEventAPI>\n        let backToBackEvents:  Promise<GameEventAPI>\n        let partyEvents:  Promise<GameEventAPI>\n        const db: DB = new DB('WinnerDrinks', 'triviaEvents', 'partyEvents', 'backToBackEvents')\n        const api: API = new API(`${process.env.REACT_APP_SERVER_URL}/api/`)\n\n        if (window.indexedDB) {\n            triviaEvents = db.getTrivia()\n            backToBackEvents = db.getBackToBack()\n            partyEvents = db.getParty()\n        \n        } else {\n            triviaEvents = api.getTrivia()\n            backToBackEvents = api.getBackToBack()\n            partyEvents = api.getParty()\n        }\n\n\n        // maybe promise allSettled is better to use then if one promise is rejected you can use some cached events\n        Promise.all([triviaEvents, backToBackEvents, partyEvents]).then((response) => {\n            /* setTriviaEvents(response[0].data)\n            setBackToBackEvents(response[1].data)\n            setPartyEvents(response[2].data) */\n            setTriviaEvents(response[0])\n            setBackToBackEvents(response[1])\n            setPartyEvents(response[2])\n\n            console.log('response[0]', response[0])\n            console.log('response[1]', response[1])\n            console.log('response[2]', response[2])\n        })\n      }, [])\n\n    const addScore = (p: Player, score: number) => {\n        p.addScore(score)\n    }\n\n    const makeWinnerAlert = (p: any) => {\n        let str: string\n\n        // If p is an array, display an alert for multiple players\n        if (Array.isArray(p)) {\n            str = 'The winners are: \\n'\n            p.forEach(element => {\n                str = str + `${element.toString()} with a total score of: ${element.score} \\n`\n            });\n\n            // If there is no param, display an alert for no points given\n        } else if (p == null) {\n            str = `No points awarded!`\n\n            //If p is a single player object, display an alert for one winner\n        } else if (p instanceof Player) {\n            str = `The winner is ${p.toString()} with a total score of: ${p.score}`\n        } else {\n            str = ``\n        }\n\n        alert(str);\n    }\n\n    const chooseRandomNewGame = () => {\n        let newIndex = currentGameIndex;\n        while (newIndex === currentGameIndex) { // Don't allow the same game twice in a row. \n            newIndex = Math.floor(Math.random() * games.length)\n        }\n        setCurrentGameIndex(newIndex);\n    }\n\n    const getPlayers = (amount: number): Player[] => {\n        const result: Player[] = [];\n        amount = Math.min(amount, props.players.length)\n        shuffle(props.players);\n        for (let i = 0; i < amount; i++) {\n            result.push(props.players[i])\n        }\n        return result;\n    };\n\n    const getRandomGameEvent = (gameEventAPI: GameEventAPI): IBackToBack | IParty | ITrivia => {\n        return gameEventAPI.questions[Math.floor(Math.random() * gameEventAPI.questions.length)]\n    }\n\n    const gameProps = { \n        getPlayers: getPlayers, \n        addScore: addScore, \n        makeWinnerAlert: makeWinnerAlert, \n        chooseRandomNewGame: chooseRandomNewGame\n    };\n\n    if (!triviaEvents || !backToBackEvents || !partyEvents) {\n        return (<div><p>Loading...</p></div>)\n    }\n\n    switch (currentGameIndex) {\n        case 3: \n            return (<div className=\"Game\"><Trivia gp={gameProps} gameEvent={getRandomGameEvent(triviaEvents)}/></div>);\n        case 2:\n            return (<div className=\"Game\"><BackToBack gp={gameProps} gameEvent={getRandomGameEvent(backToBackEvents)}/></div>);\n        case 1:\n            return (<div className=\"Game\"><Party gp={gameProps} gameEvent={getRandomGameEvent(partyEvents)}/></div>);\n        case 0:\n            return (<div className=\"Game\"><WheelComponent gp={gameProps} /></div>);\n\n    }\n    return (\n        <div className=\"Game\">\n\n        </div>\n    );\n}\n\nexport default Game;","import './App.css';\r\n\r\nfunction ComponentGetToKnow() {\r\n    return(        \r\n    <div >\r\n        <button className=\"button is-danger\" onClick={() => {\r\n            window.location.reload();\r\n        }}>Reload page</button>\r\n    </div>);\r\n}\r\n\r\nexport default ComponentGetToKnow;","import React, { useState } from 'react';\nimport Login from './Login';\nimport Game from './Game'\nimport Player from './Player'\nimport 'bulma';\nimport './App.css';\nimport ResetButton from './ResetButton';\n\nfunction App(props: any) {\n  const [names, setNames] = useState<Player[]>([]);\n  const [play, setPlay] = useState(false);\n\n  const addUser = (newUserName: string) => {\n    const newUser = new Player(newUserName);\n    setNames([...names, newUser]);\n  };\n\n\n\n  if (!play) {\n    return (\n      <div className=\"App section\">\n        {console.log('PUBLIC_URL')}\n        {console.log(process.env.PUBLIC_URL)}\n        <Login setter={addUser} />\n        <input className=\"button\" type=\"button\" value=\"Done\" onClick={() => {\n          if (names.length < 2) return; // must be at least two players. \n          setPlay(true); \n        }} />\n        <h2 className=\"title is-5\" >Players</h2>\n        <ul className=\"columns\">\n          {names.map(item =>\n            (<li className=\"column\" key={item.toString()}>{item.toString()}</li>)\n          )}\n        </ul>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"App section\">\n        <h1 className=\"title is-3\">Let's play!</h1>\n        <Game players={names} />\n        <ResetButton></ResetButton>\n      </div>\n\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  // process.env.NODE_ENV === 'production' && \n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n"],"sourceRoot":""}