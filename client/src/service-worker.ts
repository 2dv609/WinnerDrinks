/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';
import { IDBPDatabase, openDB } from 'idb';
import { DB } from './util/DB'
import { API } from './util/API'

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA

// eslint-disable-next-line no-restricted-globals
// Your custom service worker code goes here.
precacheAndRoute(self.__WB_MANIFEST);

console.log('self.__WB_MANIFEST:', self.__WB_MANIFEST)

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.

// Load IndexedDB 
self.addEventListener('activate', async (event) => {
  if (self.indexedDB) {
      console.log('IndexedDB is supported');
      const db: DB = new DB()
      await db.createObjectStore()
      /* const questions: ITrivia[] = []
      const triviaResponse: any = await fetch('http://localhost:4000/api/trivia')
      const triviaEvent: any = await triviaResponse.json()
      
      triviaEvent.questions.forEach((question: ITrivia) => {
        if (questions) {
          questions.push(question)
        }
      }) */

      await db.loadDB()

      
      /* const request = self.indexedDB.open('WinnerDrinks', 1);
      console.log('request:', request);
      // get database from event
      // var db: IDBPDatabase; // === request.result
      
      request.onsuccess = (event: any) => {
          console.log('[onsuccess]', request.result);

          // Store triviaEvents
          fetch('http://localhost:4000/api/trivia')
          .then((response) => {
              return response.json()
          })
          .then((data) => {
              const questions: ITrivia[] = []
              console.log('Response data:', data)

              console.log('event.target')
              console.log(event.target)

              data.questions.forEach((question: ITrivia) => {
                  if (questions) {
                    questions.push(question)
                  }
              })

              // get database from event             
              const db = event.target.result 
              
                
              // create transaction from database
              const transaction: any = db.transaction('triviaEvents', 'readwrite');
              
              // add success event handleer for transaction
              // you should also add onerror, onabort event handlers
              transaction.onsuccess = (event : Event) => {
                  console.log('[Transaction] ALL DONE!');
              };
              
              // get store from transaction
              // returns IDBObjectStore instance
              const questionsStore = transaction.objectStore('triviaEvents');// put products data in productsStore
              
              questions.forEach((question) => {
                  questionsStore.add(question); // IDBRequest
              });

          })
          .catch((error) => {
              console.error('ERROR from event activate read stream: ' + error);
          })

          // Store partyEvents
          fetch('http://localhost:4000/api/party')
          .then((response) => {
              return response.json()
          })
          .then((data) => {
              const questions: IParty[] = [];
              console.log('Response data:', data)

              data.questions.forEach((question: IParty) => {
                  questions.push(question)
              })

              // get database from event
              const db = event.target.result; // === request.result

              // create transaction from database
              const transaction = db.transaction('partyEvents', 'readwrite');
              
              // add success event handleer for transaction
              // you should also add onerror, onabort event handlers
              transaction.onsuccess = (event: Event) => {
                  console.log('[Transaction] ALL DONE!');
              };
              
              // get store from transaction
              // returns IDBObjectStore instance
              const questionsStore = transaction.objectStore('partyEvents');// put products data in productsStore
              questions.forEach(function(question) {
                  questionsStore.add(question); // IDBRequest
              });

          })
          .catch((error) => {
              console.error('ERROR from event activate read stream: ' + error);
          })

          // Store backToBackEvents
          fetch('http://localhost:4000/api/back-to-back')
          .then((response) => {
              return response.json()
          })
          .then((data) => {
              const questions: IBackToBack[] = [];
              console.log('Response data:', data)

              data.questions.forEach((question: IBackToBack) => {
                  questions.push(question)
              })

              // get database from event
              const db = event.target.result; // === request.result

              // create transaction from database
              const transaction = db.transaction('backToBackEvents', 'readwrite');
              
              // add success event handleer for transaction
              // you should also add onerror, onabort event handlers
              transaction.onsuccess = (event: Event) => {
                  console.log('[Transaction] ALL DONE!');
              };
              
              // get store from transaction
              // returns IDBObjectStore instance
              const questionsStore = transaction.objectStore('backToBackEvents');// put products data in productsStore
              questions.forEach(function(question) {
                  questionsStore.add(question); // IDBRequest
              });

          })
          .catch((error) => {
              console.error('ERROR from event activate read stream: ' + error);
          })
      };
      
      request.onerror = (event) => {
          console.log('[onerror]', request.error);
      };

      request.onupgradeneeded = (event: any) => {
          const db = event.target.result;
          const triviaStore = db.createObjectStore('triviaEvents', {keyPath: '_id'});
          triviaStore.createIndex('trivia_events_id_unqiue', '_id', {unique: true});

          const partyStore = db.createObjectStore('partyEvents', {keyPath: '_id'});
          partyStore.createIndex('party_events_id_unqiue', '_id', {unique: true});

          const backToBackStore = db.createObjectStore('backToBackEvents', {keyPath: '_id'});
          backToBackStore.createIndex('back_to_back_events_id_unqiue', '_id', {unique: true});

      }; */

  } else {
      console.log('IndexedDB is NOT supported');
  }
})
